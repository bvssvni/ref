Ref - Super-fast, easy to use, lightweight, flexible,
reference pointer garbage collector in C
BSD license.
by Sven Nilsen, 2012
http://www.cutoutpro.com

Version: 0.003
in angular degrees versioning notation
http://isprogrammingeasy.blogspot.no/2012/08/angular-degrees-versioning-notation.html

________________________________________________________________________________
ABOUT REFERENCE COUNTING

Reference counting is a type of garbage collection where each structure got
a counter for each pointer address pointing to its location.

1. Each time a pointer address is copied, the counter shall increase.
2. Each time a pointer address is no longer needed, the counter shall decrease.
3. An pointer shall be decreased before assigned to another pointer.
4. A NULL pointer cannot increase or decrease.

The problem is that this is too low abstraction to be very useful.
For example, copying content from one structure to another is painful.

Ref uses C preprosessor macroes except for the releasing of memory.
It runs near as fast as without garbage collection.

Ref uses higher abstraction by splitting reference counting into macroes by usage.
At no point you will have to deal with retaining and releasing.
It also got an optional array 'refs' configured by gcStart to declare
which pointers locally in a function that needs to be released on function exit.
This prevents one common type of bug where the programmer forgets to keep
track of the pointers and release them.

Ref knows which pointers are allocated on the heap on the stack by using
the trick of initializing memory to 0 on the stack, for example "point a = {};".
Stack pointers can refer to heap pointers as their members, but in that case must
be "released" like a heap pointer with gcSet.
Because heap memory is expensive to allocate, the uniform treatment of stack
and heap memory is an important aspect of Ref which allows very fast code.

gcSet(<dst>, <src>)			Set pointer.
gcSet(<dst>, NULL)			Release pointer.
gcIgnore(<function call>)		Release result of function.
gcCopy(<dst>, <src>)			Copy content of struct.
gcStart(gcRef(a), gcRef(b), ...)	Pointers to be released on gcEnd or gcReturn.
gcReturn(<src>)				Return pointer from function.
gcEnd()					Clean up local pointers.
gcInit(<type>, <name>, ...)		Initialize a heap pointer.
					... is optional initial settings.
gcInitFlexible(<type>, <name>, 		Initialize a flexible heap structure.
<arrtype>, <size>, ...)			... is optional initial settings.

________________________________________________________________________________
REF GARBAGE COLLECTION - DOCUMENTATION

How to use Ref:

// Include header.
#include "ref.h"

How to make a struct garbage collected:

typedef struct point
{
	// Declare this line at the beginning
	// of every struct to use reference counting.
	ref ref;
	// If we had pointers to other structs, we would set them here.
	double x, y;
} point;

How to use garbage collection in a function:

point *point_add(point *a, point *b) 
{
	// Declare variable and initialize it.
	// 1. point - The type of struct.
	// 2. c - The variable name.
	// 3. NULL - Destructor function "void f(void *ptr)" for internal pointers.
	// 4. Code for initialization, all other data is set to 0.
	gcInit(point, c, NULL, .x = a->x + b->x, .y = a->y + b->y);

	// Creates mandatory array for pointers to be collected.
	gcStart(gcRef(c));

	// When returning a pointer, use gcReturn.
	// This will automatically do garbage collection.
	gcReturn(c);
}

// Return NULL from a function.
gcEnd();
return NULL;

// When there is no return value:
gcEnd();
return;

// When you no longer need a pointer.
gcSet(a, NULL);

// Before calling a function, use gcSet to release pointer.
gcSet(a, NULL);
a = point_add(a, b);

// The garbage collector uses ref.is_allocated internally to distinguish
// between pointers allocated on the heap and pointers on the stack.
// This makes it possible for a heap pointer to later point to a
// stack pointer and vice versa.
point a = {};
gcInit(point, b);
gcSet(b, &a);
gcSet(b, NULL);

// Copying is performed with correct increment of member references,
// which number is specified by the ref.members_length value.
gcCopy(a, &(point){.x = 2, .y = 3});

// When a function returns an unused pointer, 'ignore' it.
gcIgnore(point_add(a, b));

// Nesting functions without assigning the return value will result in leak,
// not because the reference counter but because there is no ownership.
point_add(point_add(a, b), c);

// Create an array of pointer-pointers to be collected.
// This can only be called once in the same function.
gcStart(gcRef(a), gcRef(b), gcRef(c), ...)

// Do garbage collection.
// Requires a call to gcStart.
gcEnd();

FLEXIBLE STRUCTURES

When the last member of a structure is a dynamic array,
the structure is called "flexible" because it allocates extra
memory for the array.

typedef struct {int n, double[] arr} vector;

vector *vector_Up(void)
{
	gcInitFlexible(vector, v, double, 3, .n = 3);
	v->arr[0] = 0; v->arr[1] = 1; v->arr[2] = 0;
	return v;
}

________________________________________________________________________________
CHEAT SHEET

In standard C				In Ref

A *a = malloc(sizeof(A));		gcInit(A, a);

free(a);				gcSet(a, NULL);

a = foo();				gcSet(a, NULL); // release a before assignment.
					a = foo();

memcpy(a1, a2, sizeof(A));		gcCopy(a1, a2);

if (error)				gcReturn(c); // requires gcStart
	goto CLEANUP;
CLEANUP:
if (a != NULL) free(a);
if (b != NULL) free(b);
return c;

________________________________________________________________________________
4 THINGS TO REMEMBER

1. Add garbage collected pointers to other structs right after "ref ref;".
This allows one to set 'ref.members_length = 2' to release members up automatically.
	
	typedef struct person person;
	struct person {
		ref ref;
		person *father;
		person *mother;
	};
	
2. A destructor got signature "void destructor(void *ptr);".

        gcInit(person, me, .ref.destructor = person_Delete);

3. Use "gcReturn" and "gcEnd" properly.

	// When adding returned value to gcStart.
	person *create_new_person(void) {
		gcStart(gcRef(a), gcRef(b), gcRef(c));
		...
		// gcEnd(); return a; WRONG!
		gcReturn(a); // Correct!
	}

	// When not adding returned value to gcStart.
	person *create_new_person(void) {
		gcStart(gcRef(b), gcRef(c));
		...
		// gcReturn(a); WRONG!
		gcEnd(); return a; // Correct!
	}

4. Do not assign without making sure the destination pointer is NULL.

	gcSet(a->father, NULL);
	a->father = find_father("Carl");

